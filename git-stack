#!/bin/bash
set -e

# set -u is not safe because Bash < 4.4 will barf on use of empty arrays :(

######################################################################

help() {
    cat <<EOF
ğŸ“š git-stack: work on multiple branches simultaneously

A stack is a set of branches (with corresponding PRs on GitHub), that are
merged together locally so you can continue to work as if the PRs had been
merged already.

    git stack
        If on a stack, show info.
        If not on a stack, show README

    git stack -N|--new [--name ...] [BRANCH...]
        Create a new stack targeting the current commit as base, adding the
        given branches initially as patches. Warns if this is going to replace
        an existing stack

    git stack -c|--commit BRANCH
        Commit the currently staged changes to the given branch, either
        adding onto an existing BRANCH or creating a new one off of the current
        stack's base.

    git stack -x|--extract SRC DST
        Take the currently staged changes, apply them to SRC, and apply them
        in reverse to DST. This moves changes from SRC to DST. DST can be
        either an existing or new branch.

        Obtain these changes by (for example) running one of these commands:

            git checkout -p 1234abcd~
            git checkout STACK-base path/to/my/file

    git stack -d|--delete [--name ...]
        Delete a given stack.

    git stack -A|--add BRANCH
        Add a new branch to the stack and refresh it.

    git stack --remove BRANCH
        Remove a branch from the stack and refresh it.

    git stack -r|--refresh
        Refresh the stack

    git stack -R|--rebase BRANCH
        Rebase and refresh the stack on top of a new base commit.

    git stack -o|--reorder [--name ...]
        Edit the stack configuration in \$EDITOR ($EDITOR), then refresh.

    git stack -P|--push
        Push all branches in the stack
EOF
}

command=""
name=""
verbose=false

set_command() {
    if [[ -n "$command" ]]; then
        echo "Cannot combine --$command and --$1." >&2
        exit 1
    fi
    command="$1"
}

while [[ $# -gt 0 ]]; do
    case $1 in
        # Commands
        -N|--new)
            set_command new
            ;;
        -d|--delete)
            set_command delete
            ;;
        -A|--add)
            set_command add
            ;;
        --remove)
            set_command remove
            ;;
        -c|--commit)
            set_command commit
            ;;
        -x|--extract)
            set_command extract
            ;;
        -r|--refresh)
            set_command refresh
            ;;
        -R|--rebase)
            set_command rebase
            ;;
        -P|--push)
            set_command push
            ;;
        -o|--reorder)
            set_command reorder
            ;;

        # Options
        -n|--name)
            name="$2"
            shift
            ;;
        -v|--verbose)
            verbose=true
            ;;
        -h|--help)
            help
            exit 0
            ;;
        -*)
            help
            exit 1
            ;;
        *)
            break
            ;;
    esac
    shift
done

######################################################################

quiet="--quiet"
if $verbose; then
    quiet=""
fi

git_dir="$(git rev-parse --git-dir)"
stacks_dir="${git_dir}/stacks"
current_git_branch="$(git rev-parse --abbrev-ref HEAD)"

declare -a stack_branches
stack_base=""
stack_name=""

stack_file() {
    echo "${stacks_dir}/${stack_name}"
}

is_stack() {
    if [[ -f "${stacks_dir}/$1" ]]; then
        return 0
    else
        return 1
    fi
}

load_stack() {
    # shellcheck source=/dev/null
    source "$(stack_file)"
}

save_stack() {
    mkdir -p "$stacks_dir"
    f="$(stack_file)"

    echo "stack_branches=()" > "$f"
    echo "stack_base=\"${stack_base}\"" >> "$f"
    for branch in "${stack_branches[@]}"; do
        echo "stack_branches+=(\"${branch}\")" >> "$f"
    done
}

refresh_stack() {
    echo "ğŸ“š Base:  ${stack_base}"
    git reset --hard ${quiet} "${stack_base}"
    for branch in "${stack_branches[@]}"; do
        echo "ğŸ“š Stack: $branch"
        git merge --no-edit --rerere-autoupdate ${quiet} "$branch"
    done
}

is_branch() {
    if git rev-parse --verify "$1" > /dev/null; then
        return 0
    else
        return 1
    fi
}

validate_exists() {
    if ! is_branch "$1"; then
        echo "No such branch: $1" >&2
        exit 1
    fi
}

ensure_branch() {
    if is_branch "$1"; then
        # An existing branch, must be in this stack already
        found=false
        for branch in "${stack_branches[@]}"; do
            if [[ "$branch" == "$1" ]]; then
                found=true
            fi
        done
        if ! $found; then
            echo "Existing branch but not in this stack: $1 (add using git stack --add first)" >&2
            exit 1
        fi
    else
        # Not an existing branch, create one and add it to the stack
        git branch "$1" "${stack_base}"
        stack_branches+=("$1")
        save_stack
    fi
}

if is_stack "${current_git_branch}"; then
    stack_name=${current_git_branch}
    load_stack
fi

######################################################################

if [[ "$command" == "" ]]; then
    if [[ "$stack_name" == "" ]]; then
        echo "${current_git_branch}: not a stack!"
        echo ""
        help
        exit 0
    fi
    echo "Stack:"
    echo "    ${stack_name}"
    echo "Base:"
    echo "    ${stack_base}"
    echo "Branches:"
    for branch in "${stack_branches[@]}"; do
        echo "    $branch"
    done
fi

case "$command" in
    new)
        git config --global rerere.enabled true

        stack_name="${name:-STACK}"
        for branch in "$@"; do
            if [[ "${branch}" == "${current_git_branch}" ]]; then
                echo "Stack branch (${branch}) cannot be the same as the base (${current_git_branch}). Switch to 'main' or 'master' first." >&2
                exit 1
            fi
            validate_exists "$branch"
            stack_branches+=("${branch}")
        done

        if is_stack "$stack_name"; then
            echo "Stack already exists: ${stack_name}. Press [ENTER] to confirm or Ctrl-C to abort." >&2
            read
        fi


        # Make a marker branch for the stack base, so that it won't move
        git checkout -B "${stack_name}-base"
        stack_base="${stack_name}-base"

        save_stack
        git checkout -B "$stack_name"
        refresh_stack
        ;;
    delete)
        stack_name="${name:-${stack_name:-STACK}}"
        if ! is_stack "$stack_name"; then
            echo "No such stack: $stack_name" >&2
            exit 1
        fi

        load_stack
        if [[ "${current_git_branch}" == "${stack_name}" ]]; then
            git checkout "${stack_base}"
        fi

        git branch -D "${stack_name}"
        rm "${stacks_dir}/${stack_name}"

        # Remove the special base branch if it exists
        if is_branch "${stack_name}-base"; then
            git branch -D "${stack_name}-base"
        fi
        ;;
    add)
        for branch in "$@"; do
            validate_exists "$branch"
            stack_branches+=("${branch}")
        done

        save_stack
        refresh_stack
        ;;
    remove)
        for delete in "$@"; do
            for i in "${!stack_branches[@]}"; do
                if [[ "${stack_branches[i]}" = "$delete" ]]; then
                    unset 'stack_branches[i]'
                fi
            done
        done

        save_stack
        refresh_stack
        ;;
    commit)
        branch="$1"
        if [[ -z "$branch" ]]; then
            echo "Supply a BRANCH" >&2
            exit 1
        fi
        ensure_branch "$branch"

        # Process (since we cannot stash only unstaged changes)
        # . Commit staged changes to a temporary branch
        # . Stash what's left
        #   | . Switch to (or create) target branch
        #   | . Cherry-pick temporary branch, amending the commit message
        #   | . Switch back to source branch
        # . Pop stash
        echo "ğŸ“š Committing index to temporary branch"
        git checkout -B stack_tmp

        did_commit="true"
        git commit -m "Add changes to $branch" || { did_commit="false"; }

        if $did_commit; then
            echo "ğŸ“š Stashing other changes"
            should_pop="true"
            git stash push || { should_pop="false"; }

            echo "ğŸ“š Replaying index"
            git checkout "$branch"
            success="true"
            git cherry-pick stack_tmp --edit || { success="false"; }

            echo "ğŸ“š Back to where we were"
            git checkout "$current_git_branch"

            if ! $success; then
                # Cherry-pick our index back here without committing
                git cherry-pick stack_tmp --no-commit
            fi

            if $should_pop; then
                # Pop our unstaged changes back
                git stash pop
            fi

            # Do a refresh as well
            refresh_stack
        else
            git checkout "$current_git_branch"
            git branch -D stack_tmp
        fi
        ;;
    extract)
        src="$1"
        dst="$2"
        if [[ -z "$src" || -z "$dst" ]]; then
            echo "Supply a SRC and DST " >&2
            exit 1
        fi
        validate_exists "$src"
        ensure_branch "$dst"

        git checkout "$src"
        git commit -m "Moving changes to ${dst}"
        commit=$(git rev-parse HEAD)

        git checkout "$dst"
        # Apply the commit in reverse
        git show "$commit" | git apply --index -R
        git commit

        git checkout "$current_git_branch"

        refresh_stack
        ;;
    refresh)
        refresh_stack
        ;;
    rebase)
        if [[ "$1" == "" ]]; then
            echo "git-stack rebase: requires an argument" >&2
            exit 1
        fi
        stack_base="$1"
        validate_exists "$stack_base"
        save_stack
        refresh_stack
        ;;
    push)
        origin="origin"
        for branch in "${stack_branches[@]}"; do
            echo "ğŸ“š Pushing: $branch"
            git push $quiet "$origin" "${branch}"
        done
        ;;
    reorder)
        sf="$(stack_file)"
        cp "${sf}" "${sf}.tmp"
        ${EDITOR:-vim} "${sf}.tmp" && {
            mv "${sf}.tmp" "${sf}"
            $0 --refresh
        }

esac
